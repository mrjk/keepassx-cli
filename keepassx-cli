#!/bin/bash
# TEMPLATE_VERSION=2024-04-25

# Basic bash template for command/resource based CLI.
# Features:
# * Automatic command discovery and help generation
# * Logging and traces
# * Application dependency checker
# * Support for getopts
# * Return code support
# * Command executor with dry mode

set -euo pipefail

# App Global variable
# =================

APP_SCRIPT="${0##*/}"
APP_NAME="${APP_SCRIPT%.*}"
APP_AUTHOR="mrjk"
APP_EMAIL="mrjk<dot>78<at>gmail<dot>com"
APP_LICENSE="GPLv3"
APP_URL="https://github.com/$APP_AUTHOR/$APP_NAME"
APP_REPO="https://github.com/$APP_AUTHOR/$APP_NAME.git"
APP_GIT="git@github.com:$APP_AUTHOR/$APP_NAME.git"

APP_STATUS=stable
APP_DATE="2024-07-25"
APP_VERSION=0.0.2

#APP_DEPENDENCIES="column tree htop"
APP_LOG_SCALE="TRACE:DEBUG:RUN:INFO:DRY:HINT:NOTICE:CMD:USER:WARN:ERR:ERROR:CRIT:TODO:DIE:PROMPT"

APP_DRY=${APP_DRY:-false}
APP_FORCE=${APP_FORCE:-false}
APP_LOG_LEVEL=INFO
#APP_LOG_LEVEL=DRY
#APP_LOG_LEVEL=DEBUG


SCRIPT_REAL_PATH=$(realpath "$0")
SCRIPT_REAL_DIR=$( cd -- "$( dirname -- "$SCRIPT_REAL_PATH" )" &> /dev/null && pwd )
#APP_REAL_NAME=$(basename "$SCRIPT_REAL_PATH")
APP_REAL_NAME='keepassx-cli'

APP_CONFIG_DIR=${XDG_CONFIG_HOME:-$HOME/.config}/$APP_REAL_NAME
APP_CONFIG_PREFIX='conf.'

# CLI libraries
# =================

_log ()
{
  # [ -o errexit ] && { set +x ; local _trace=false; } || local _trace=true
  

  local lvl="${1:-DEBUG}"
  shift 1 || true

  # Check log level filter
  if [[ ! ":${APP_LOG_SCALE#*$APP_LOG_LEVEL:}:$APP_LOG_LEVEL:" =~ :"$lvl": ]]; then
    if [[ ! ":${APP_LOG_SCALE}" =~ :"$lvl": ]]; then
      >&2 printf "%s\n" "  BUG: Unknown log level: $lvl"
    else
      return 0
    fi
  fi

  local msg=${*}
  if [[ "$msg" == '-' ]]; then
    msg="$(cat - )"
  fi
  while read -r -u 3 line; do
    >&2 printf "%5s: %s\\n" "$lvl" "${line:- }"
  done 3<<<"$msg"

  # ${_trace:-} && set -x || true
}

_die ()
{
    local rc=${1:-1}
    shift 1 || true
    local msg="${*:-}"
    if [[ -z "$msg" ]]; then
      [ "$rc" -ne 0 ] || exit 0
      _log DIE "Program terminated with error: $rc"
    else
      _log DIE "$msg"
    fi

    # Remove EXIT trap and exit nicely
    trap '' EXIT
    exit "$rc"
}

_exec ()
{
  local cmd=( "$@" )
  if ${APP_DRY:-false}; then
    _log DRY "  | ${cmd[@]}"
  else
    _log RUN "  | ${cmd[@]}"
    "${cmd[@]}"
  fi
}   

_check_bin ()
{
  local cmd cmds="${*:-}"
  for cmd in $cmds; do
    command -v "$1" >&/dev/null || return 1
  done
}

# shellcheck disable=SC2120 # Argument is optional by default
_sh_trace ()
{
  local msg="${*}"

  (
    >&2 printf "%s\n" "TRACE: line, function, file"
    for i in {0..10}; do
      trace=$(caller "$i" 2>&1 || true )
      if [ -z "$trace" ] ; then
        continue
      else
        printf "%s\n" "$trace"
      fi
    done | tac | head -n -1
    [ -z "$msg" ] || >&2 printf "%s\n" "TRACE: Bash trace: $msg"
  )
}

# Usage: trap '_sh_trap_error $? ${LINENO} trap_exit 42' EXIT
_sh_trap_error () {
    local rc=$1
    [[ "$rc" -ne 0 ]] || return 0
    local line="$2"
    local msg="${3-}"
    local code="${4:-1}"
    set +x

    _log ERR "Uncatched bug:"
    _sh_trace # | _log TRACE -
    if [[ -n "$msg" ]] ; then
      _log ERR "Error on or near line ${line}: ${msg}; got status ${rc}"
    else
      _log ERR "Error on or near line ${line}; got status ${rc}"
    fi
    exit "${code}"
}

# CLI helpers
# =================

# Dispatch command
clish_dispatch ()
{
  local prefix=$1
  local cmd=${2-}
  shift 2 || true
  [ ! -z "$cmd" ] || _die 3 "Missing command name, please check usage"

  if [[ $(type -t "${prefix}${cmd}") == function ]]; then
    "${prefix}${cmd}" "$@"
  else
    _log ERROR "Unknown command for ${prefix%%_?}: $cmd"
    return 3
  fi
}


# Parse command options
# Called function must return an args array with remaining args
clish_parse_opts ()
{
  local func=$1
  shift
  clish_dispatch "$func" _options "$@"
}

# Read CLI options for a given function/command
# Options must be in a case statement and surounded by
# 'parse-opt-start' and 'parse-opt-stop' strings. Returns
# a list of value separated by ,. Fields are:
clish_help_options ()
{
  local func=$1
  local data=

  # Check where to look options function
  if declare -f "${func}_options" >/dev/null; then
    func="${func}_options"
    data=$(declare -f "$func")
    data=$(printf "%s\n%s\n" 'parse-opt-start' "$data" )
  else
    data=$(declare -f "$func")
  fi

  # declare -f ${func} \
  echo "$data" | awk '/parse-opt-start/,/parse-opt-stop/ {print}' \
    | grep --no-group-separator -A 1 -E '^ *--?[a-zA-Z0-9].*)$' \
    | sed -E '/\)$/s@[ \)]@@g;s/.*: "//;s/";//' \
    | xargs -n2 -d'\n'
}

# List all available commands starting with prefix
clish_help_subcommands ()
{
  local prefix=${1:-cli__}
  declare -f \
    | grep -E -A 2 '^'"$prefix"'[a-z0-9]*(__[a-z0-9]*)*? \(\)' \
    | sed '/{/d;/--/d;s/'"$prefix"'//;s/ ()/,/;s/";$//;s/^  *: "//;' \
    | xargs -n2 -d'\n' \
    | sed 's/, */,/;s/__/ /g;/,,$/d' 
    
}

# Show help message of a function
clish_help_msg ()
{
  local func=$1
  clish_dispatch "$func" _usage 2>/dev/null || true
}


# Show cli usage for a given command
clish_help ()
{
  : ",Show this help"
  local func=${1:-cli}
  local commands= options= message= output=

  # Help message
  message=$(clish_help_msg $func)

  # Fetch command options
  options=$(
    while IFS=, read -r flags meta desc _; do
      if [ ! -z "${flags:-}" ]; then
        printf "  %-22s  %-20s  %s\n" "$flags" "$meta" "$desc"
      fi
    done <<< "$(clish_help_options $func)"
  )

  # Fetch sub command informations
  commands=$(
    while IFS=, read -r flags meta desc _; do
      if [ ! -z "${flags:-}" ]; then
        printf "  %-22s  %-20s  %s\n" "$flags" "$meta" "$desc"
      fi
    done <<< "$(clish_help_subcommands ${func}__)"
  )

  # Display help message
  printf "%s\n" "${message:+$message}
${commands:+
commands:
$commands}
${options:+
options:
$options
}"

  # Append extra infos
  if ! [[ "$func" == *"_"* ]]; then
    cat <<EOF
info:
  config dir: $APP_CONFIG_DIR
  author: $APP_AUTHOR ${APP_EMAIL:+<$APP_EMAIL>}
  version: ${APP_VERSION:-0.0.1}-${APP_STATUS:-beta}${APP_DATE:+ ($APP_DATE)}
  license: ${APP_LICENSE:-MIT}
EOF
  fi

#query format:
#  $APP_NAME get [<PROFILE>] <KEY>
#  $APP_NAME query [<PROFILE>__]<KEY>
#
#examples:
#  $APP_NAME query my_key
#  $APP_NAME query default__my_key
#  $APP_NAME query store1__my_admin_pass


}


# Internal libreary
# =================

# Libraries
# --------------

path_nicer ()
{
  local path=$1

  if [[ "$path" =~ ^"$HOME" ]]; then
    path="~${path##$HOME}"
  fi

  echo "$path"
}

# Ask the user to confirm
_confirm () {
  local msg="Do you want to continue?"
  >&2 printf "%s" "${1:-$msg}"
  >&2 printf "\n%s" "([y]es or [N]o): "
  >&2 read REPLY
  case $(tr '[A-Z]' '[a-z]' <<< "$REPLY" ) in
    y|yes) printf "%s\n" "true" ;;
    *)     printf "%s\n" "false" ;;
  esac
}

# Ask the user to input string
_input () {
  local msg=$1
  local default=${2-}
  >&2 printf "%s" "${1:-$msg}${default:+ [$default]}: "
  >&2 read REPLY
  [[ -n "$REPLY" ]] || REPLY=${default}
  printf "%s" "$REPLY"
}

# Ask user to input a secret
_input_secret () {
  local msg=$1
  local default=${2-}
  >&2 printf "%s" "${1:-$msg}${default:+ [$default]}: "
  >&2 read -s REPLY
  [[ -n "$REPLY" ]] || REPLY=${default}
  printf "%s" "$REPLY"
  >&2 echo ''
}



# Keepass backend
# =================

# Detect where is installed keepassxc-cli
kc_detect_bin ()
{
  #_log WARN $PATH
  #_log WARN ============

  if command -v "$KP_BIN" &>/dev/null ; then
    KP_BIN="keepassxc-cli"
  else

    KP_BIN=
    if command -v 'flatpak' &>/dev/null; then
      if flatpak info org.keepassxc.KeePassXC >&/dev/null; then
        KP_BIN='flatpak run --command=/app/bin/keepassxc-cli org.keepassxc.KeePassXC'
        _log DEBUG "Found keepassxc-cli in flatpak installation (org.keepassxc.KeePassXC)"
      else
        _log DEBUG "Could not find keepassxc-cli in flatpak installation"
      fi
    fi

  fi



  [[ -n "$KP_BIN" ]] || \
    _die 7 "Could not find 'keepassxc-cli' command. Plese install keepass first."
}

# Ensure password and DB file are correctly setup
kc_init ()
{
  # Ensure database is setup
  if [[ -z "${KC_DB:-}" ]]; then
    _die 4 "Missing keepass db file configuration"
  elif [[ ! -f "${KC_DB:-}" ]]; then
    _die 5 "Keepass db file does not exists: $KC_DB"
  fi
  
  # Ensure password is set
  local methods="keyring_gnome prompt"
  for method in $methods; do
  
    # Ensure password is empty
    if [[ -n "$KC_PASS" ]]; then
      _log DEBUG "Keepass secret found!"
      break
    fi

    case "$method" in
      keyring_gnome)
        [[ "${KC_KEYRING}" == true ]] || continue
        _log DEBUG "Try to fetch keepass secret from keyring ..."
        KC_PASS=$(gnome_keyring_password_get "$KC_PROFILE")
        ;;
      prompt)
        _log DEBUG "Try to fetch keepass secret from prompt ..."
        KC_PASS=$(_input_secret "Database password")
        ;;
      *)
        _log ERROR "Unsupported password method: $method"
        return 1
        ;;
    esac
  done
  _log DEBUG "Keepass loaded '$KC_DB'" # with password: ${KC_PASS//[^ ]/*}"

  # Failure management
  if [[ -z "${KC_PASS:-}" ]]; then
    _log ERROR "Could not find a password to unlock keepaaxc database"
    return 1
  fi
}


# Generic API to query keepass DB
kc_cli ()
{
  # _log DEBUG "ARG1=${1:-}"
  # _log DEBUG "ARG2=${2:-}"
  # _log DEBUG "ARG3=${3:-}"
  # _log DEBUG "ARG4=${4:-}"
  # _log DEBUG "ARG5=${5:-}"
  # _log DEBUG "ARG6=${6:-}"

  local result=
  local full_cmd1="$1 '$KC_DB' ${2:+'$2'}${3:+ '$3'}"
  local full_cmd="$1 \"$KC_DB\" ${2:+\"$2\"}${3:+ \"$3\"}"
  _log DEBUG "Full command: $KP_BIN ${full_cmd}"

  # Prepare expect script
  local expect_script=$(cat <<- EOF
    log_user 0; 
    spawn $KP_BIN $full_cmd; 
    expect "Enter password to unlock"; 
    send "$KC_PASS\r"; 
    interact;
EOF
  )

  # Run expect keepassxc with expect
  # result=$( expect -f <( echo "$expect_script")
  result=$( expect -c "$expect_script" )

  # Validate result
  if grep -q 'Could not find entry' <<< "$result"; then
    >&2 echo "ERROR: Could not find entry matching key '$args' in: $KC_DB"
    return 1
  fi
  grep -v '^Enter password to unlock ' <<< "$result"

}

# Generic API to query keepass DB
kc_cli_v1 ()
{
  # set -x
  local opts=$1
  shift 1 || true
  #local args=$@

  #local arg1="'${1:-}'"
  #local arg2="'${2:-}'"

  local cmd_sufix="${1:+\"$1\"}${2:+ \"$2\"}"
  local result=$(expect -c '
    log_user 0; 
    spawn '"$KP_BIN"' '"$opts"' "'"$KC_DB"'" '"$cmd_sufix"'; 
    expect "Enter password to unlock"; 
    send "'"$KC_PASS"'\r"; 
    interact;'
  )
  #local result=$(expect -c '
  #  log_user 0; 
  #  spawn '"$KP_BIN"' '"$opts"' "'"$KC_DB"'" "'"$1"'" "'"${2-}"'"; 
  #  expect "Enter password to unlock"; 
  #  send "'"$KC_PASS"'\r"; 
  #  interact;'
  #)

  if grep -q 'Could not find entry' <<< "$result"; then
    >&2 echo "ERROR: Could not find entry matching key: $args"
    return 1
  fi
  grep -v '^Enter password to unlock ' <<< "$result"

}

# Extract a single password
kc_get ()
{
  local result=$(kc_cli "show -s" "$@")

  if grep -q 'Could not find entry' <<< "$result"; then
    >&2 echo "ERROR: Could not find password matching key: $args"
    return 1
  fi

  # Clean output and remove trailing new return
  sed -n '/^Password: /s/Password: //p' <<< "$result" | sed -e "s/\r//g"
}


# Config: Gnome Keyring support
# =================

# Ensure gnome keyring is available
gnome_keyring_is_available ()
{
  if [[ "$KC_KEYRING" != 'true' ]]; then
    _log DEBUG "Gnome keyring is disabled"
    return 1
  fi

  if ! command -v secret-tool >&/dev/null; then
    _log WARN "Missing secret-tool binary to query gnome-keyring"
    return 1
  fi

  if [[ -z "$(pidof gnome-keyring-daemon)" ]]; then
    _log WARN "Gnome keyring is not started"
    return 1
  fi
}

# Fetch password from keyring
gnome_keyring_password_get ()
{
  local name=$1

  gnome_keyring_is_available

  local result=$(secret-tool lookup keepass_profile "$name")
  if [[ -n "$result" ]]; then
    _log DEBUG "Password found in gnome-keyring for: $name"
    echo "$result"
  else
    _log DEBUG "Password for '$name' could not be found in gnome-keyring"
    return 1
  fi
}


# Set password in gnome keyring
gnome_keyring_password_set ()
{
  local name=$1
  local pass=$2
  local path=$3
  local file=${path##*/}

  gnome_keyring_is_available

  # Clean existing entry
  secret-tool clear keepass_profile "$name"
  if [[ -z "$pass" ]]; then
    _log DEBUG "Keyring password entry cleared: $KEYRING_NAME_PREFIX$name"
    return
  fi

  # Add entry
  printf '%s' "$pass" \
    | secret-tool store \
      --label="$KEYRING_NAME_PREFIX$name" \
      keepass_profile "$name" \
      keepass_path "$path" \
      keepass_file "$file" 
  _log DEBUG "Keyring password entry created: $KEYRING_NAME_PREFIX$name"

}


# Profile support
# =================

# List available profile names
profile_names ()
{
  local matches=$(ls -1 $APP_CONFIG_DIR/${APP_CONFIG_PREFIX}*.env 2>/dev/null)
  sed "s@.*/${APP_CONFIG_PREFIX}@@;s/\.env//" <<< "$matches" | sort
}

# List all profiles with config file
profile_files ()
{
  local names=$(profile_names)
  for name in $names; do
    printf "%s;%s\n" "$name" "$APP_CONFIG_DIR/${APP_CONFIG_PREFIX}${name}.env"
  done
}

# Report profile config
profile_info ()
{
  profile_files | column -t -s ';'
}

# Get profile path
profile_path ()
{
  local name=$1
  local target="$APP_CONFIG_DIR/${APP_CONFIG_PREFIX}${name}.env"
  echo "$target"
}

# Check if profile name exists
profile_exists ()
{
  local name=$1
  [[ -n "${name:-}" ]] || return 1
  local path=$(profile_path "$name" )
  [[ -f "$path" ]]
}

# Retrieve a valid profile config
profile_conf_path ()
{
  local name=$1
  local target=$(profile_path "$name")
  [[ -f "$target" ]] || {
    _log WARN "Profile '$name' does not exists: $target"
    return 1
    }
  echo "$target"
}

# Set password in config
profile_password_update ()
{
  local name=$1
  local pass=$2
  local comment=${3:-}

  if ! profile_exists "$name"; then
    _log ERROR "Profile '$name' does not exists"
    return 1
  fi
  local target=$(profile_path "$name")

  sed -i '/^\s*KC_PASS=/d' "$target"
  echo "KC_PASS='$pass'${comment:+  # $comment}" >> "$target"

}

# Init profile configuration
profile_init ()
{
  local profile=${1:-$KC_PROFILE}
  local prefix=conf.

  KC_CONF="$APP_CONFIG_DIR/${APP_CONFIG_PREFIX}env"
  if [[ -n "$profile" ]]; then

    KC_CONF="$APP_CONFIG_DIR/${APP_CONFIG_PREFIX}${profile}.env"
    [[ -f "$KC_CONF" ]] || \
      return 1
    KC_PROFILE=$profile
  fi
  
  if [[ -f "$KC_CONF" ]]; then
    _log DEBUG "Loading profile conf: $KC_CONF"
    . "$KC_CONF" || {
        _die 3 "Error while loading config: $KC_CONF"
        return 1
      }
  else
    _log DEBUG "Skip absent profile file: $KC_CONF"
  fi

  _log DEBUG "Profile '${KC_PROFILE:-default}' loaded from: $KC_CONF"
}


# Add new profile
profile_add ()
{
  local name=${1:-}
  local db=${2:-}

  # Determine profile name
  # ---------------------------
  while [[ -z "$name" ]]; do
    name=$(_input "Name of the profile" $name )
  done

  local target=$(profile_path "$name")
  if profile_exists "$name"; then
    _log WARN "Profile '$name' already exists: $target"
    return
  fi
  _log INFO "Create new profile: $name"


  # Determine database file
  # ---------------------------
  while [[ -z "$db" ]]; do
    db=$(_input "Path of the keepass database" $db )
    if [[ ! -f "$db" ]]; then
      _log ERROR "Can't find file: $db"
      db=
    fi
  done
  _log INFO "Use keepass database file: $db"


  # Generate profile
  # ---------------------------
  local header=$(cat <<EOF
# Keepass-cli configuration for ${name}
# =====================================

# Path of the keepass database (required)
KC_DB="$db"

# Password to unlock database (optional)
KC_PASS=''

EOF
)
  echo "$header" > "$target"

  # Set password
  profile_password_set "$name"

  # Ensure new content is added
  local new_content=$(cat "$target")
  if [[ -z "$db" ]] && [[ "$header" == "$new_content" ]]; then
    _log WARN "New profile '$name' was not modified, and thus not created"
    rm "$target"
  else
    _log INFO "New profile created '$name': $target"
    echo "-- %< -- %< -- %< -- %< -- %< -- %< -- %< --"
    cat "$target"
    echo "-- %< -- %< -- %< -- %< -- %< -- %< -- %< --"
  fi

}


# Set profile password
profile_password_set ()
{
  #set -x
  local name=${1:-}
  local password=${2:-}
  local target=
  target=$(profile_path "$name")

  # Check for password
  # ---------------------------
  local store_method=gnome_keyring
  if ! gnome_keyring_is_available; then
    _log WARN "Password can only be saved in clear text. Leave empty to always prompt user."
    store_method=clear_text
  fi
  password=$(_input_secret "Database password" "$password")

  # User confirmation
  # ---------------------------
  local confirmed=true
  if [[ -z "$password" ]] && ! $APP_FORCE ; then
    _log WARN "You have entered no password, so '$name' passwords will be removed from config and keyring."
    confirmed=$(_confirm "Do you really want to delete '$name' password?")
  fi
  if [[ "$confirmed" != 'true' ]]; then
    _log WARN "Password '$name' has not been deleted because user cancelled"
    return 1
  fi

  # Store password
  # ---------------------------
  local pw_conf=
  local conf_comment=
  case "$store_method" in 
    gnome_keyring)

      if [[ -z "$password" ]]; then
        log_msg="Password removed from keyring: $KEYRING_NAME_PREFIX$name"
        conf_comment="Leave empty for prompt"
      else
        log_msg="Password saved in keyring: $KEYRING_NAME_PREFIX$name"
        conf_comment=$log_msg
      fi
      
      # Save in keyring
      gnome_keyring_password_set "$name" "$password" "$KC_DB"

      # Always remove password from conf when in keyring
      _log DEBUG "Remove any password occurences in profile"
      profile_password_update "$name" "" "$conf_comment"

      _log INFO "$log_msg"
    ;;
    clear_text)

      conf_comment="Leave empty for prompt"
      if [[ -z "$password" ]]; then
        log_msg="Password removed from '$name' config: $target"
      else
        log_msg="Password saved in '$name' config: $target"
        conf_comment=$log_msg
      fi

      profile_password_update "$name" "$password" "$pw_conf"
      _log INFO "$log_msg"
      ;;
    *)
      pw_conf="Password is not stored, it will always be prompt"
      profile_password_update "$name" "" "$pw_conf"
      _log INFO "$pw_conf"
      ;;
  esac

}


# Core App Helpers
# =================

# Query parser
# --------------

# parse_query ()
# {
#   local key="$@"

#   local profile=${key%%__*}
#   if [[ -n "$profile" ]] && [[ "$profile" != "$key" ]]; then
#     KC_KEY=${key#${profile}__}
#     KC_PROFILE=$profile
#     _log INFO "Extracted profile from key: $KC_PROFILE ($KC_KEY)"
#   else
#     KC_KEY=$key
#   fi
# }

# parse_get ()
# {
#   KC_KEY=$@
#   if [[ $# -gt 1 ]]; then
#     if profile_exists $1; then
#       KC_PROFILE=$1
#       _log DEBUG "Matched profile: $KC_PROFILE"
#       shift 1
#       KC_KEY=$@
#       _log DEBUG "Matched key: $KC_KEY"
#     fi
#   fi
# }

# Format:
# [PROFILE] KEY
_parse__profile_key ()
{
  KC_KEY=$@
  KC_PROFILE=$KC_PROFILE

  if [[ $# -gt 0 ]]; then
    if profile_exists "$1"; then
      KC_PROFILE="$1"
      _log DEBUG "Matched profile: $KC_PROFILE"
      shift 1
      KC_KEY=$@
      _log DEBUG "Matched key: $KC_KEY"
    fi
  fi

  # Space Remap
  local new_key=$(sed 's@ / @/@g;s@^/ @/@' <<<"$KC_KEY")
  [[ "$KC_KEY" == "$new_key" ]] || \
    {
      _log INFO "Remapped key to '$new_key'"
      KC_KEY=$new_key
    }
}

# Format:
# [PROFILE] KEY ATTACHEMENT
_parse__profile_key_attachement ()
{
  _parse__profile_key "$@"

  set -- ${KC_KEY[*]}
  if [[ $# -lt 2 ]]; then
    _die 45 'Missing attachment or key'
  fi

  KC_KEY=${@:1:${#@}-1}
  KC_ATTACHMENT=${@:${#@}}
}

# Dump all profile settings
app_info ()
{
  cat <<EOF
KP_BIN=$KP_BIN

KEEPASS_CLIENT_KEY=$KC_KEY
KEEPASS_CLIENT_PROFILE=$KC_PROFILE
KEEPASS_CLIENT_DB=$KC_DB
KEEPASS_CLIENT_CONF=$KC_CONF
KEEPASS_CLIENT_PASS=${KC_PASS//[^ ]/*}

APP_REAL_NAME=$APP_REAL_NAME
SCRIPT_PATH=$SCRIPT_PATH
SCRIPT_DIR=$SCRIPT_DIR
SCRIPT_REAL_PATH=$SCRIPT_REAL_PATH
SCRIPT_REAL_DIR=$SCRIPT_REAL_DIR
KEEPASS_BIN=$KP_BIN
EOF
}


# Core App Helpers
# =================

cli__shell()
{
  : "[PROFILE],Generate shell code to be sourced in shell"

  _parse__profile_key "$@"
  profile_init
  local script_path=$( path_nicer "$SCRIPT_PATH" )


  cat <<EOF
# eval "\$( $script_path shell $KC_PROFILE)"

export KEEPASS_CLIENT_BIN=$script_path
EOF

  if [[ -n "${KC_PROFILE:-}" ]]; then
    echo "export KEEPASS_CLIENT_PROFILE=$KC_PROFILE"
  else
    cat <<EOF
export KEEPASS_CLIENT_DB=$KC_DB
export KEEPASS_CLIENT_KEY=$KC_KEY
export KEEPASS_CLIENT_PASS=${KC_PASS}

EOF
  fi
}


cli__info()
{
  : ",Show debug info"

  # Parse arguments
  _parse__profile_key "$@"
  profile_init

  # Run action
  app_info
}


# Core App CLI
# =================

cli__dump()
{
  : "[PROFILE] [PATTERN],Dump all keys"

  # Parse arguments
  _parse__profile_key "$@"
  profile_init || return $?
  kc_init || return $?

  # Run action
  if [[ -n "$KC_KEY" ]]; then
    kc_cli "ls -R -f" | grep -i "$KC_KEY"
  else
    kc_cli "ls -R -f"
  fi
}


cli__tree()
{
  : "[PROFILE] [GROUP],Dump as tree"

  # Parse arguments
  _parse__profile_key "$@"
  profile_init || return $?
  kc_init || return $?

  # Run action
  kc_cli "ls -R" "$KC_KEY" | grep -v '^\s*$'
}


cli__show()
{
  : "[PROFILE] KEY,Show a key"

  # Parse arguments
  _parse__profile_key "$@"
  profile_init || return $?
  kc_init || return $?

  # Run action
  kc_cli "show" "$KC_KEY"
}


cli__get()
{
  : "[PROFILE] KEY,Get key secret"

  # Parse arguments
  _parse__profile_key "$@"
  profile_init || return $?
  kc_init || return $?

  # Run action
  _log INFO "Fetch secret '$KC_KEY' from '$KC_DB'"
  kc_get "$KC_KEY"
}


cli__extract()
{
  : "[PROFILE] KEY FILE,Extract attachement from key"

  # Parse arguments
  _parse__profile_key_attachement "$@"
  profile_init || return $?
  kc_init || return $?

  # Run action
  _log INFO "Extract file '$KC_ATTACHMENT' from '$KC_KEY'"
  kc_cli "attachment-export --stdout" "$KC_KEY" "$KC_ATTACHMENT"

#  kc_cli "show -s" "$@"
}


# CLI Profile Commands
# =================

# Profile cli group
# ---------------

# Display help message
cli__profile_usage ()
{
  cat <<EOF
${APP_NAME}: Manage profiles
usage: ${APP_NAME} profile [OPTS] [CMD]
       ${APP_NAME} profile --help
EOF
}


# Read CLI options, shows group level options
cli__profile_options ()
{
  while [[ ! -z "${1:-}" ]]; do
    # : "parse-opt-start"
    case "$1" in
      -h|--help|help)
        : ",Show help"
        clish_help cli__profile; _die 0
        ;;
      -*)
        _die 1 "Unknown option: $1"
        ;;
      *)
        args=("$@")
        shift $#
      ;;
    esac
    # : "parse-opt-stop"
  done
}


cli__profile ()
{
  : "COMMAND,Manage profiles"

  # Set default vars
  local msg="Default message"
  local mode="limited"
  local args=

  # Parse args
  clish_parse_opts cli__profile "$@"
  set -- "${args[@]}"

  # Dispatch to sub commands
  clish_dispatch cli__profile__ "$@" || _die $?
}


# Profile sub-commands
# ---------------

cli__profile__ls()
{
  : ",List profiles"
  profile_info
}


cli__profile__add()
{
  : "PROFILE [PATH_KBDX],Add new profile"
  #local name=$1
  #shift
  #local db=${@-}

  #profile_add $name "${db}"
  profile_add "$@"
}


cli__profile__password()
{
  : "PROFILE,Set profile database password"
  local name=$1

  profile_init "$name" || return $?
  # set -x
  profile_password_set "$@"
}


cli__profile__rm()
{
  : "PROFILE,Remove profile"
  local name=$1
  local target=

  # Profile name confirmation
  target=$(profile_conf_path "$name") || return $?

  # Confirmation
  local confirmed=true
  if ! $APP_FORCE ; then
    confirmed=$(_confirm "Do you really want to delete profile '$name' in '$target' ?")
  fi
  if [[ "$confirmed" != 'true' ]]; then
    _log WARN "Profile '$name' has not been deleted because user cancelled"
    return 1
  fi

  # Actual delete
  rm "$target"
  _log INFO "Profile '$name' has been deleted ($target)"
}


cli__profile__show()
{
  : "PROFILE,Show profile configuration"
  local name=$1

  if ! profile_exists "$name"; then
    _log ERROR "Profile '$name' does not exists"
    return 1
  fi

  local target=$(profile_path "$name")
  cat "$target"
}


cli__profile__edit()
{
  : "PROFILE,Edit profile configuration"
  local name=$1

  if ! profile_exists "$name"; then
    _log ERROR "Profile '$name' does not exists"
    return 1
  fi

  local target=$(profile_path "$name")
  ${EDITOR:-vi} "$target"
}


# Core App
# =================

# App initialization
cli_init ()
{
  # Useful shortcuts
  export GIT_DIR=$(git rev-parse --show-toplevel 2>/dev/null)
  export SCRIPT_PATH="${BASH_SOURCE[0]}"
  export SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
  #export SCRIPT_DIR=$( cd -- "$( dirname -- "$SCRIPT_PATH" )" &> /dev/null && pwd )

  export WORK_DIR=${GIT_DIR:-${SCRIPT_DIR:-$PWD}}
  export PWD_DIR=${PWD}

  # Default settings
  export APP_DB_DIR=.

  export KC_PROFILE=${KEEPASS_CLIENT_PROFILE:-}
  export KC_KEY=${KEEPASS_CLIENT_KEY:-}
  export KC_DB=${KEEPASS_CLIENT_DB:-}
  export KC_PASS=${KEEPASS_CLIENT_PASS:-}
  export KC_CONF=${KEEPASS_CLIENT_CONF:-}
  export KC_KEYRING=${KEEPASS_KEYRING:-}

  if [[ -z "${KC_KEYRING}" ]]; then
    KC_KEYRING=$(KC_KEYRING=true gnome_keyring_is_available && echo true || echo false)
    KEYRING_NAME_PREFIX='KeePass - '
  fi

  export KC_IN_VAULT=false
  export KP_BIN='keepassxc-cli'

  kc_detect_bin
}

# App help message
cli_usage ()
{
  cat <<EOF
${APP_NAME} is command line tool

usage: ${APP_NAME} [OPTS] COMMAND [ARGS]
       ${APP_NAME} help
EOF
}

# Parse CLI options
cli_options ()
{
  while [[ ! -z "${1:-}" ]]; do
    # : "parse-opt-start"
    case "$1" in

      # ansible-vault compatibility
      #-i|--vault-id)
      #  : "ID,Set vault ID"
      #  # This option is greedy, because ansible-vault does not properly send arguments
      #  KC_IN_VAULT=true
      #  _log INFO "Loaded from ansible-vault"
      #  [[ ! -z "${2:-}" ]] || _die 1 "Missing vault ID"
      #  shift 1
      #  _log INFO "Use query: $@"
      #  KC_QUERY=$@ 
      #  shift $#
      #  ;;

      # Key query
      -P|--profile)
        : "PROFILE,Set query profile"
        [[ ! -z "${2:-}" ]] || _die 1 "Missing vault profile"
        _log INFO "Use profile: $2"
        KC_PROFILE=$2 
        shift 2
        ;;

      -k|--key)
        : "ID,Set key to retrieve"
        # This option is greedy, because ansible-vault does not properly send arguments
        [[ ! -z "${2:-}" ]] || _die 1 "Missing vault ID"
        _log INFO "Use ID: $2"
        KC_KEY=$2 
        shift 2
        ;;

      # Keepass backend
      -d|--db)
        : "FILE,Path to kbdx file"
        [[ ! -z "${2:-}" ]] || _die 1 "Missing vault file"
        _log INFO "Use keepass file: $2"
        KC_DB=$2 
        shift 2
        ;;

      -p|--pass)
        : "PASSWORD,Keepass db password"
        [[ ! -z "${2:-}" ]] || _die 1 "Missing vault password"
        _log DEBUG "Use keepass password: $2"
        KC_PASS=$2 
        shift 2
        ;;

      -K|--keyring)
        : "BOOL,Enable keyring agent to fetch password"        
        case "${2:-}" in
          t*|T*) KC_KEYRING=true; shift 1;;
          f*|F*) KC_KEYRING=false; shift 1 ;;
          *) KC_KEYRING=true ;;
        esac
        
        _log DEBUG "Fetch password from keyring: $KC_KEYRING"
        shift 1
        ;;

      # Generic
      -f|--force)
        : ",Enable force mode"
        _log INFO "Force mode enabled"
        APP_FORCE=true 
        shift
        ;;
      -h|--help)
        : ",Show this help message"
        clish_help cli; 
        _die 0
        ;;
      -v|-vv|-vvv|--verbose)
        : "[LEVEL],Set verbosity level"
        if [[ "$1" == "-vv" ]]; then
          APP_LOG_LEVEL=DEBUG
        elif [[ "$1" == "-vvv" ]]; then
          APP_LOG_LEVEL=TRACE
        else
          [[ ! -z "${2:-}" ]] || _die 1 "Missing log level value"
          APP_LOG_LEVEL=$2
          shift 1
        fi
        shift 1
        _log INFO "Log level set to: $APP_LOG_LEVEL"
        ;;
      -V|--version)
        : ",Show version"
        echo "$APP_VERSION"
        exit 0
        ;;
      -*)
        _die 1 "Unknown option: $1"
        ;;
      *)
        args=( "$@" )
        shift $#
        
        # To enable greedy parsing
        # args+=( "$1" )
        # shift 1
      ;;
    esac
    # : "parse-opt-stop"
  done
}

cli ()
{
  # Init
  trap '_sh_trap_error $? ${LINENO} trap_exit 42' EXIT

  # Init app
  cli_init

  # Parse CLI flags
  clish_parse_opts cli "$@"
  set -- "${args[@]}"

  # Route commands before requirements
  local cmd="query"
  if ! $KC_IN_VAULT; then
    cmd=${1:-help}
    shift 1 || true
  fi
  case "$cmd" in
    -h|--help|help) clish_help cli; return ;;
    # expl) cli__example "$@"; return ;;
  esac
  
  # Define requirements
  local prog
  for prog in ${APP_DEPENDENCIES-} ; do
    _check_bin $prog || {
      _log ERROR "Command '$prog' must be installed first"
      return 2
    }
  done

  # Dispatch subcommand
  clish_dispatch cli__ "$cmd" "$@" \
    || _die $? "Command '$cmd' returned error: $?"  
}

cli "${@}"
